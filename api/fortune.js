import { GoogleGenerativeAI } from '@google/generative-ai';
import multer from 'multer';

// Configure multer for memory storage (Vercel doesn't support disk storage)
const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 4 * 1024 * 1024, // 4MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed!'), false);
    }
  }
});

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Fortune telling prompt
const fortunePrompt = `B·∫°n l√† m·ªôt th·∫ßy b√≥i vui t√≠nh v√† h∆°i troll. H√£y ph√¢n t√≠ch h√¨nh ·∫£nh b√†n tay n√†y v√† ƒë∆∞a ra l·ªùi b√≥i vui nh·ªôn nh∆∞ng c≈©ng c√≥ ph·∫ßn b√≠ ·∫©n. 

Y√äU C·∫¶U ƒê·∫¶U RA (QUAN TR·ªåNG):
- Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng sau:
{
  "intro": "L·ªùi m·ªü ƒë·∫ßu ng·∫Øn g·ªçn, kh√¥ng t·ª± gi·ªõi thi·ªáu",
  "palmLines": "Ph√¢n t√≠ch ƒë∆∞·ªùng ch·ªâ tay (tim, tr√≠ tu·ªá, ƒë·ªùi) - kho·∫£ng 80-100 t·ª´",
  "love": "D·ª± ƒëo√°n t√¨nh duy√™n h∆°i troll - kho·∫£ng 60-80 t·ª´", 
  "career": "D·ª± ƒëo√°n s·ª± nghi·ªáp v√† t√†i l·ªôc - kho·∫£ng 60-80 t·ª´",
  "health": "S·ª©c kh·ªèe v√† may m·∫Øn - kho·∫£ng 60-80 t·ª´",
  "advice": "L·ªùi khuy√™n vui nh·ªôn cu·ªëi c√πng - kho·∫£ng 40-60 t·ª´"
}

Phong c√°ch: Vui v·∫ª, h√†i h∆∞·ªõc, c√≥ ch√∫t troll nh∆∞ng kh√¥ng qu√° ƒë√†. S·ª≠ d·ª•ng emoji ph√π h·ª£p.
Ch√∫ √Ω: B·ªè qua ph·∫ßn t·ª± gi·ªõi thi·ªáu b·∫£n th√¢n, tr·∫£ l·ªùi theo phong c√°ch genZ tr√¥i ch·∫£y, kh√¥ng d√πng d·∫•u ""`;

// Sanitize AI text to remove common markdown formatting just in case
function sanitizePlainText(text) {
  if (!text || typeof text !== 'string') return text;
  let t = text;
  // Remove markdown headings and leading bullet markers
  t = t.replace(/^\s{0,3}#{1,6}\s+/gm, '');
  t = t.replace(/^\s{0,3}[-*+]\s+/gm, '');
  // Remove bold/italic markers
  t = t.replace(/\*{1,3}([^*]+)\*{1,3}/g, '$1');
  t = t.replace(/_{1,3}([^_]+)_{1,3}/g, '$1');
  // Strip inline/backtick code markers
  t = t.replace(/`{1,3}([\s\S]*?)`{1,3}/g, '$1');
  // Collapse multiple blank lines
  t = t.replace(/\n{3,}/g, '\n\n');
  return t.trim();
}

export const config = {
  maxDuration: 30,
};

export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Check if API key is available
    if (!process.env.GEMINI_API_KEY) {
      console.error('‚ùå GEMINI_API_KEY not found in environment variables');
      return res.status(500).json({ 
        success: false, 
        error: 'Server configuration error',
        message: 'API key not configured'
      });
    }

    // Parse multipart form data
    await new Promise((resolve, reject) => {
      upload.single('palmImage')(req, res, (err) => {
        if (err) {
          console.error('‚ùå Upload error:', err);
          reject(err);
        } else {
          resolve();
        }
      });
    });

    if (!req.file) {
      return res.status(400).json({ error: 'No image uploaded' });
    }

    console.log('üì∏ Image received:', req.file.originalname, 'Size:', req.file.size);

    // Convert buffer to base64
    const base64Image = req.file.buffer.toString('base64');

    // Use Gemini Vision model
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

    const result = await model.generateContent([
      fortunePrompt,
      {
        inlineData: {
          mimeType: req.file.mimetype,
          data: base64Image
        }
      }
    ]);

    const rawResponse = result.response.text();
    console.log('ü§ñ Raw AI response:', rawResponse.substring(0, 200) + '...');
    
    // Try to parse JSON response
    let fortuneData;
    try {
      // Clean the response first
      const cleanedResponse = rawResponse.replace(/```json|```/g, '').trim();
      fortuneData = JSON.parse(cleanedResponse);
    } catch (parseError) {
      // If JSON parsing fails, fallback to plain text
      console.log('JSON parse failed, using plain text fallback');
      fortuneData = {
        intro: "Ch√†o b·∫°n! üîÆ",
        palmLines: sanitizePlainText(rawResponse),
        love: "",
        career: "",
        health: "",
        advice: ""
      };
    }

    console.log('‚úÖ Fortune generated successfully');

    res.json({
      success: true,
      fortune: fortuneData
    });

  } catch (error) {
    console.error('‚ùå Fortune telling error:', error);
    
    res.status(500).json({
      success: false,
      error: 'Failed to generate fortune',
      message: error.message
    });
  }
}
